drawn from exponential distribution with lambda=0.2",
xlab="")
# density of the averages of samples
lines(density(row_means))
# theoretical center of distribution
abline(v=1/lambda, col="red")
# theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sampleSize)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# add legend
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
hist(simulationResults, breaks=50, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
library(swirl)
swirl()
0
exit()
exit
bye()
hist(runif(1000))
help(runif)
rnorm(1000)
library(ggplot2)
qplot(lambda_vals, coverage, geom = c("point","smooth")) + geom_hline(yintercept=0.95)
Create means for 1000 simulations, taking 40 samples per simulation
```{r}
set.seed(1337)
# Lambda is set 0.2 for all simulations as per assignment instructions
lambda <- 0.2
# Number of simluations and sample size as set per assignment requirements
nSimulations <- 1:1000
sSize <- 40
# Create a data frame to hold the results of the simulated sampling of means
simulationResults <- data.frame(x = sapply(nSimulations, function(x) {
mean(rexp(sSize, lambda))
}))
lambda_vals <- seq(4, 6, by=0.01)
coverage <- sapply(lambda_vals, function(lamb) {
mu_hats <- rowMeans(matrix(rexp(sSize*nSimulations, rate=0.2), nSimulations, sSize))
ll <- mu_hats - qnorm(0.975) * sqrt(1/lambda**2/sSize)
ul <- mu_hats + qnorm(0.975) * sqrt(1/lambda**2/sSize)
mean(ll < lamb & ul > lamb)
})
library(ggplot2)
qplot(lambda_vals, coverage, geom = c("point","smooth")) + geom_hline(yintercept=0.95)
```
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
AppliedPredictiveModeling
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
install.packages("Caret")
install.packages("caret")
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(concrete$CompressiveStrength)
install.packages("Hmisc ")
install.packages("Hmisc")
library("Hmisc")
cut2(concrete)
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
install.packages("dplyr")
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$BlastFurnaceSlag, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Water, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Superplasticizer, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$CoarseAggregate, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$FineAggregate, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Age, g=breaks))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, breaks=20)
View(concrete)
View(concrete)
summary(concrete$Superplasticizer)
log(0)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]] training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.0.8)
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
View(trainIndex)
View(trainIndex)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
plot(myPlot)
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
dgamma
show
predict
install.packages(c('caret','kern')
)
library(kernlab)
library(caret)
data(spam)
inTrain <- createDataPartition(y=spam$type, p = 0.75, list=FALSE)
training <- spam[inTrain,]
test <- spam[-inTrain,]
dim(training)
dim(testing)
dim(test)
View(test)
View(training)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=TRUE)
folds
sapply(folds, length)
folds[[1]]
folds[[1][1:10]]
folds[[1],[1:10]]
folds[[1]][1:10]
folds[[2]][1:10]
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=FALSE)
folds
data("iris")
library(ggplot2)
names(iris)
table(iris$Species)
qplot(Petal.Width, Speal.Width, colour=Species)
qplot(Petal.Width, Speal.Width, colour=Species, data=training)
qplot(Petal.Width, Speal.Width, colour=Species, data=iris)
qplot(Petal.Width, Sepal.Width, colour=Species, data=iris)
library(caret)
help("caret")
help("createDataPartition")
ctreeBag$fit
library(caret)
data(iris)
inTrain <- createDataPartition(y=iris$species, p=0.7, list=FALSE)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
head(iris)
inTrain <- createDataPartition(y=iris, p=0.7, list=FALSE)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
help(createDataPartition)
training <- iris[inTrain,]
test <- iris[-inTrain,]
summary(training)
summary(test)
dim(training)
dim(testing)
dim(test)
modlda = train(Species ~ ., data=training, method="lda")
install.packages(MASS)
modlda = train(Species ~ ., data=training, method="lda")
install.packages('e1071', dependencies=TRUE)
modlda = train(Species ~ ., data=training, method="lda")
modnb = train(Species ~ ., data=training, method="nb")
modnb = train(Species ~ ., data=training, method="nb")
plda = predict(modlda, testing)
plda = predict(modlda, test)
plda
pnd <- predict(modnb, test)
table(plda, pnd)
summary(modlda)
modlda
install.packages(c("AppliedPredictiveModeling","ElemStatLearn","pgmm","rpart"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
set.seed(125)
model = train(Case ~ ., data=training, method="rpart")
model = train(Case ~ ., data=training, method="rpart")
pred = predict(model, TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
pred = predict(model, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
plot(cartmodel$finalModel, uniform=TRUE, main="Classification Tree")
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
model$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- segmentationOriginal$Case=="Train"
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[!inTrain, ]
set.seed(125)
library(rpart)
library(ggplot2)
cartmodel <- train(Class ~ ., method = "rpart", data = training)
cartmodel$finalModel
plot(cartmodel$finalModel, uniform=TRUE, main="Classification Tree")
text(cartmodel$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
modelfit <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelfit, newdata)
modelfit$finalModel
str(olive)
View(olive)
plot(modelfit$finalModel, uniform=TRUE, main="Classification Tree")
> text(modelfit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
text(modelfit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
trainingpredict <- predict(modelfit, trainSA)
testingpredict <- predict(modelfit, testSA)
missClass(trainSA$chd, trainingpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
install.packages(c("gbm","lubridate","forecast"))
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
a <- D:\Users\Ben\Documents\GitHub\DevelopingDataProducts-CourseProject
a <- "D:\Users\Ben\Documents\GitHub\DevelopingDataProducts-CourseProject"
setwd("D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject")
getwd()
shiny::runApp('DDP-CourseProject')
install.packages("slidify")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv)
''
)
')
install_github('slidify','ramnathv')
install_github('ramnathv/slidifyLibraries')
library(slidify)
setwd("D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject")
author("DDP-ReproduciblePitch")
slidify("~/DDP-ReproduciblePitch/index.RMD")
setwd("D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject/DDP-ReproduciblePitch")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
?data()
data()
data(InsectSprays)
str(InsectSprays)
View(InsectSprays)
data(LifeCycleSavings)
summary(LifeCycleSavings)
View(LifeCycleSavings)
data(OrchardSprays)
view(OrchardSprays)
View(OrchardSprays)
data(WWWusage)
View(WWWusage)
data(women)
View(women)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
plot(mtcars.rf, log="y")
varImpPlot(mtcars.rf)
library("randomForest")
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
plot(mtcars.rf, log="y")
varImpPlot(mtcars.rf)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
view(mtcars)
View(mtcars)
summary(mtcars)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
??mtcars
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
some.data <- rnorm(10, 4, 1.5)
names(some.data) <- 1:10
barplot(some.data)
some.data <- rnorm(10, 4, 1.5)
names(some.data) <- C("a","b","c")
barplot(some.data)
some.data <- rnorm(10, 4, 1.5)
names(some.data) <- c("a","b","c")
barplot(some.data)
some.data <- rnorm(3, 4, 1.5)
names(some.data) <- C("a","b","c")
barplot(some.data)
some.data <- rnorm(2, 4, 1.5)
names(some.data) <- c("a","b","c")
barplot(some.data)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
newCar = data.frame(0, 6, 50, 421, 1, 4, 1, 0,
0, 4, 2)
names(newCar) <- names(mtcars)
View(newCar)
a <- predict(mtcars.rf, newCar)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=TRUE, importance=TRUE)
a <- predict(mtcars.rf, newCar)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
summary(mtcars)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
mtcars$vs <- as.character(mtcars$vs)
mtcars$am <- as.character(mtcars$am)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=TRUE, importance=TRUE)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
View(mtcars)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
mtcars.rf
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
summary(mtcars.rf)
mtcars.rf.importants
mtcars.rf.importance
type(mtcars)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
inTrainingSet <- createDataPartition(mtcars, p=0.6, list=FALSE)
training <- mtcars[inTrainingSet,]
testing <- mtcars[-inTrainingSet,]
control <- trainControl(method="cv", 4)
mtcars.rf <- train(mpg ~ ., data=training, method="rf", trControl=control, ntree=250)
inTrainingSet <- createDataPartition(mtcars$mpg, p=0.6, list=FALSE)
View(inTrainingSet)
View(inTrainingSet)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
predict(mtcars.rf, newCar)
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
?col
?barplot
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
runApp('D:/Users/Ben/Documents/GitHub/DevelopingDataProducts-CourseProject/DDP-CourseProject')
